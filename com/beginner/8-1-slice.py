# -*- coding: utf-8 -*-
# 对list进行切片
#
# 取一个list的部分元素是非常常见的操作。比如，一个list如下：
#
# >>> L = ['Adam', 'Lisa', 'Bart', 'Paul']
#
# 取前3个元素，应该怎么做？
#
# 笨办法：
#
# >>> [L[0], L[1], L[2]]
# ['Adam', 'Lisa', 'Bart']
#
# 之所以是笨办法是因为扩展一下，取前N个元素就没辙了。
#
# 取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：
#
# >>> r = []
# >>> n = 3
# >>> for i in range(n):
# ...     r.append(L[i])
# ...
# >>> r
# ['Adam', 'Lisa', 'Bart']
#
# 对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。
#
# 对应上面的问题，取前3个元素，用一行代码就可以完成切片：
#
# >>> L[0:3]
# ['Adam', 'Lisa', 'Bart']
#
# L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。
#
# 如果第一个索引是0，还可以省略：
#
# >>> L[:3]
# ['Adam', 'Lisa', 'Bart']
#
# 也可以从索引1开始，取出2个元素出来：
#
# >>> L[1:3]
# ['Lisa', 'Bart']
#
# 只用一个 : ，表示从头到尾：
#
# >>> L[:]
# ['Adam', 'Lisa', 'Bart', 'Paul']
#
# 因此，L[:]实际上复制出了一个新list。
#
# 切片操作还可以指定第三个参数：
#
# >>> L[::2]
# ['Adam', 'Bart']
#
# 第三个参数表示每N个取一个，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个。
#
# 把list换成tuple，切片操作完全相同，只是切片的结果也变成了tuple。
# 任务
#
# range()函数可以创建一个数列：
#
# >>> range(1, 101)
# [1, 2, 3, ..., 100]
#
# 请利用切片，取出：
#
# 1. 前10个数；
# 2. 3的倍数；
# 3. 不大于50的5的倍数。

L = list(range(1, 101))
# L = range(1, 101)
print(L)
print(L[0:10])
print(L[2::3])
print(L[4:50:5])
